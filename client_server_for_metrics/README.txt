Протокол поддерживает два вида запросов к серверу со стороны клиента:

- отправка данных для сохранения их на сервере

- получения сохраненных данных

Общий формат запроса клиента:

<команда> <данные запроса><\n>

<команда> - команда сервера (команда может принимать одно из двух значений: put — сохранить данные на сервере, get — вернуть сохраненные данные с сервера),

- <данные запроса> - данные запроса (их формат мы подробно разберем ниже в примере),

- <\n> - символ переноса строки.


Общий формат ответов сервера:
!Сервер умеет обрабатывать запросы от нескольких клиентов одновременно.!

<статус ответа><\n><данные ответа><\n\n>

- <статус ответа> - статус выполнения команды, допустимы два варианта: «ok» - команда успешно выполнена на сервере и «error» - выполнение команды завершилось ошибкой

- <данные ответа> - не обязательное поле (формат ответа и случаи его отсутствия будут рассмотрены в примере ниже)

- <\n\n> - два символа переноса строки.

Для каждой метрики (<key>) храним данные о ее значениях (<value>) и времени, когда производилось измерение (<timestamp>) 

Пример:
Запросы клиента:
"put key1 23.7 1150864247\n"

"get key1\n"

Для случая, когда необходимо получить все хранимые на сервере данные, в качестве ключа используется символ звездочки «*». Пример строки запроса:
"get *\n"

Ответ сервера:
ok\nkey1 2.0 1150864247\nkey1 0.5 1150864248\key2 3.0 1150864250\n\n
сервер отправляет клиенту строку со статусом «оk» и пустым полем с данными ответа:
Если в параметре запроса переданы не валидные данные (например: нарушен формат запроса, ошибочная команда или значения value и timestamp не могут быть приведены к необходимому типу данных)
сервер отправляет строку со статусом ответа «error» и данными ответа «wrong command»

Пример:
"error\nwrong command\n\n"

Клиент получает данные от сервера в текстовом виде, метод get должен обработать строку ответа и вернуть словарь с полученными ключами с сервера.
Значением ключей в словаре является список кортежей:
[(timestamp1, metric_value1), (timestamp2, metric_value2), …]
Список отсортирован по значению timestamp (по возрастанию).

Пример 1 при запросе "get palm.cpu\n":
{
  'palm.cpu': [
    (1150864247, 0.5),
    (1150864248, 0.5)
  ]
}

Пример 2 при запросе "get *\n":
{
  'palm.cpu': [
    (1150864247, 0.5),
    (1150864248, 0.5)
  ],
  'eardrum.cpu': [
    (1150864250, 3.0),
    (1150864251, 4.0)
  ],
  'eardrum.memory': [
    (1503320872, 4200000.0)
  ]
}
